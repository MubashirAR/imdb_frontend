[{"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/index.js":"1","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Home.js":"2","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/PrivateRoute.js":"3","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Signup.js":"4","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/context/auth.js":"5","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Login.js":"6","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Admin.js":"7","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/reportWebVitals.js":"8","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/App.js":"9","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/NewMovie.js":"10","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/constants.js":"11"},{"size":500,"mtime":1606456605313,"results":"12","hashOfConfig":"13"},{"size":2905,"mtime":1606553807108,"results":"14","hashOfConfig":"13"},{"size":489,"mtime":1606556604370,"results":"15","hashOfConfig":"13"},{"size":4907,"mtime":1606550737708,"results":"16","hashOfConfig":"13"},{"size":160,"mtime":1606466017594,"results":"17","hashOfConfig":"13"},{"size":2528,"mtime":1606553823588,"results":"18","hashOfConfig":"13"},{"size":5188,"mtime":1606558564124,"results":"19","hashOfConfig":"13"},{"size":362,"mtime":1606456605313,"results":"20","hashOfConfig":"13"},{"size":3398,"mtime":1606556582510,"results":"21","hashOfConfig":"13"},{"size":5327,"mtime":1606550737240,"results":"22","hashOfConfig":"13"},{"size":176,"mtime":1606560053267,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"141t07y",{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/index.js",[],["56","57"],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Home.js",["58","59","60","61","62"],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/PrivateRoute.js",[],["63","64"],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Signup.js",["65","66"],"import React, { useState } from \"react\";\nimport axios from 'axios'\nimport { useHistory } from \"react-router-dom\";\nimport CONSTANTS from \"../constants\";\n\nconst initialState = {\n  username: '',\n  email: '',\n  role: '',\n  password: '',\n  confirmPassword: ''\n}\nfunction Signup() {\n  const [user, setUser] = useState(initialState)\n  const history = useHistory()\n  const changeHandler = (key, index) => e => {\n    const { value } = e.target || { value: e };\n    console.log({[key]: value})\n    setUser({\n      ...user,\n      [key]: value\n    })\n  }\n  // The api should also have validation because the form can be modified from inspect element\n  const isEmailValid = email => {\n    const re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(String(email).toLowerCase());\n  }\n  const isPasswordValid = password => {\n    let regx = /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{8,}$/\n    return regx.test(password)\n  }\n  const isFormValid = () => {\n    const { username, email, role, password, confirmPassword } = user;\n    console.log({ password, confirmPassword})\n    return !!username && !!email && !!role && (password === confirmPassword)\n  }\n  const saveUser = async () => {\n    if(!isEmailValid(user.email)) {\n      alert('Please enter a valid email')\n      return;\n    }\n    if(!isPasswordValid(user.password)) {\n      alert('Password must be minimum eight characters with at least one letter and one number')\n      return;\n    }\n    if(!isFormValid()) {\n      alert('Please fill in all details. Also ensure password matches with confirm password')\n      return;\n    }\n    user.genre = user.genres;\n    try {\n      const resp = await axios.post(CONSTANTS.path + '/users/', user);\n      if(resp.status === 201) {\n        alert('Saved successfully')\n        history.push('/')\n      } else {\n        alert('There was an error')\n      }\n    } catch (error) {\n      alert('There was an error.')\n    }\n  }\n  return (\n    <div className=\"d-flex justify-content-center align-items-center w-100 p-5\">\n      <div className=\"card\">\n        <div className=\"card-body\">\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\">Username</label>\n          </div>\n          <input className=\"form-control\" onChange={changeHandler('username')} value={user.username}/>\n        </div>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\">Email</label>\n          </div>\n          <div>\n            <input type=\"email\" className=\"form-control\" onChange={changeHandler('email')} value={user.email}/>\n          </div>\n          {\n            user.email && !isEmailValid(user.email)\n            ? <div>Please enter a valid email ID</div>\n            : ''\n          }\n        </div>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\">Password</label>\n          </div>\n          <input type=\"password\" className=\"form-control\" onChange={changeHandler('password')} value={user.password}/>\n          \n        </div>\n        <div className=\"input-group mb-3\">\n          <div className=\"input-group-prepend\">\n            <label className=\"input-group-text\">Confirm Password</label>\n          </div>\n          <input type=\"password\" className=\"form-control\" onChange={changeHandler('confirmPassword')} value={user.confirmPassword}/>\n          {\n            user.password !== user.confirmPassword\n            ? <p>Passwords do not match!</p>\n            : ''\n          }\n        </div>\n        <div className=\"input-group\" onClick={_ => changeHandler('role')('admin')}>\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\">\n              <input type=\"radio\" checked={user.role === 'admin'}/>\n            </div>\n          </div>\n          <input disabled type=\"text\" className=\"form-control\" value=\"Admin\"/>\n        </div>\n        <div className=\"input-group\" onClick={_ => changeHandler('role')('user')}>\n          <div className=\"input-group-prepend\">\n            <div className=\"input-group-text\">\n              <input type=\"radio\" checked={user.role === 'user'}/>\n            </div>\n          </div>\n          <input disabled type=\"text\" className=\"form-control\" value=\"User\"/>\n        </div>\n      </div>\n\n      {\n        user.password && !isPasswordValid(user.password)\n        ? <p>Password must be minimum eight characters with at least one letter and one number</p>\n        : ''\n      }\n      <button disabled={!isFormValid() || !isPasswordValid(user.password) || !isEmailValid(user.email)} className=\"btn btn-primary pull-right\" onClick={_ => saveUser()}>Save</button>\n    </div>\n  </div>\n  );\n}\n\nexport default Signup;",["67","68"],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/context/auth.js",[],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Login.js",["69","70","71"],"import React, { useEffect, useState } from \"react\";\nimport { Link, Redirect, useHistory } from \"react-router-dom\";\nimport axios from 'axios';\nimport { useAuth } from \"../context/auth\";\nimport CONSTANTS from \"../constants\";\n\nfunction Login() {\n  const [isLoggedIn, setLoggedIn] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [userName, setUserName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  let history = useHistory()\n  const { setAuthTokens, setIsAdmin, authTokens } = useAuth();\n\n  useEffect(async () => {\n    const { token_type, access_token } = authTokens || {};\n    let user = await axios.get(CONSTANTS.path + '/users/me',{\n      headers: {\n          'Authorization': ` ${token_type} ${access_token}`\n      }\n    });\n    if(user.data.role === 'admin') {\n      setIsAdmin(true)\n    } else {\n      setIsAdmin(false)\n    }\n    history.push('/admin')\n  }, [isLoggedIn])\n  var bodyFormData = new FormData();\n  async function postLogin() {\n    bodyFormData.append('username', userName);\n    bodyFormData.append('password', password);\n    try {\n      let result = await axios.post(CONSTANTS.path + \"/token\", bodyFormData, {\n          headers: {\n              'Content-Type': 'application/x-www-form-urlencoded'\n          }\n      })\n      console.log({result})\n      if (result.status === 200) {\n        setAuthTokens(result.data);\n        setLoggedIn(true);\n      } else {\n        setIsError(true);\n      }\n      \n      // history.push('/')\n    } catch (error) {\n      setIsError(true);\n    }\n  }\n  return (\n    <div className=\"card\">\n      {/* <img class=\"card-img-top\" src=\"...\" alt=\"Card image cap\"> */}\n      <div className=\"card-body\">\n            <div className=\"form-group\">\n                <input\n                    type=\"username\"\n                    value={userName}\n                    onChange={e => {\n                        setUserName(e.target.value);\n                    }}\n                    placeholder=\"email\"\n                />\n\n            </div>\n            <input\n            type=\"password\"\n            value={password}\n            onChange={e => {\n                setPassword(e.target.value);\n            }}\n            placeholder=\"password\"\n            />\n            <button onClick={postLogin}>Sign In</button>\n            <div>\n            <Link to=\"/signup\">Don't have an account?</Link>\n                { isError && 'The username or password provided were incorrect!' }\n\n            </div>\n\n      </div>\n    </div>\n  );\n}\n\nexport default Login;","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/Admin.js",["72","73","74","75","76","77","78","79"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuth } from \"../context/auth\";\nimport CONSTANTS from \"../constants\";\n\nfunction Admin(props) {\n  const [movies, setMovies] = useState([])\n  const [editMode, setEditMode] = useState({})\n  const [editData, setEditData] = useState({})\n  const [page, setPage] = useState(1)\n  const [deleteCount, setdeleteCount] = useState(1)\n  const { authTokens } = useAuth()\n  useEffect(() => {\n    getAllMovies();\n  }, [0]);\n  useEffect(() => {\n    getAllMovies();\n  }, [page, deleteCount])\n  const getAllMovies = async () => {\n    let {data: movies} = await axios.get(CONSTANTS.path + `/movies/all?page=${page}`)\n    setMovies(movies)\n    let editData = {}\n    movies.map(movie => {\n      editData[movie.id] = movie;\n    })\n    setEditData(editData)\n  }\n  const toggleEditMode = movie => {\n    setEditMode({\n      ...editMode,\n      [movie.id]: !editMode[movie.id]\n    })\n  };\n  const updateMovie = async movie => {\n    const { token_type, access_token } = authTokens || {};\n    const resp = await axios.put(CONSTANTS.path + '/movie/', movie, {\n      headers: {\n        'Authorization': ` ${token_type} ${access_token}`\n      }\n    });\n    alert('Changes saved successfully!')\n    console.log({resp})\n  }\n  const deleteMovie = async movie => {\n    if(!window.confirm(`Are you sure you want to delete the movie ${movie.name}`)) return;\n    const { token_type, access_token } = authTokens || {};\n    const resp = await axios.delete(CONSTANTS.path + `/movie/?id=${movie.id}`, {\n      headers: {\n        'Authorization': ` ${token_type} ${access_token}`\n      }\n    });\n    setdeleteCount(deleteCount+1);\n    alert('Movie deleted.')\n  }\n  const changeHandler = (movieIndex, key, genreIndex) => e => {\n    const { value } = e.target;\n    const newMovies = [...movies]\n    const movie = newMovies[movieIndex]\n    if(key === 'genre' && !isNaN(genreIndex)) {\n      let genres = [...movie.genres]\n      genres[genreIndex].name = value;\n      movie.genres = genres\n      setMovies(newMovies)\n      return;\n    }\n    newMovies[movieIndex][key] = value\n    setMovies(newMovies)\n  }\n  \n  const changePage = jumpSize => {\n    if(jumpSize < 0 && page == 1) return;\n    if(jumpSize > 0 && movies.length < 10) return;\n    setPage(page + jumpSize)\n  }\n  return (\n    <div className=\"row\">\n      {movies.map((movie, index) => (\n          <div key={movie.id} className=\"col-sm-6\">\n            <div className=\"card\">\n              <div className=\"card-body\">\n                {\n                  editMode[movie.id] \n                    ? (\n                      <>\n                        <input className=\"card-title\" onChange={changeHandler(index, 'name')} value={editData[movie.id].name}/>\n                        <input className=\"card-title\" onChange={changeHandler(index, 'director')} value={editData[movie.id].director}/>\n                        <input className=\"card-title\" onChange={changeHandler(index, 'imdb_score')} value={editData[movie.id].imdb_score}/>\n                        <input className=\"card-title\" onChange={changeHandler(index, 'popularity')} value={editData[movie.id].popularity}/>\n                        {movie.genres.map((genre, genreIndex) => {\n                          return <input className=\"card-title\" onChange={changeHandler(index, 'popularity', genreIndex)} value={genre.name}/>\n                        })}\n                        <div>\n                          <button className=\"btn btn-danger pull-right\" onClick={_ => toggleEditMode(movie)}>Cancel</button>\n                          <button className=\"btn btn-primary pull-right\" onClick={_ => updateMovie(movie)}>Save</button>\n                        </div>\n                      </>\n                    )\n                    : (\n                      <>\n                        <h5 className=\"card-title\">{movie.name}</h5>\n                        <p className=\"card-text\">{movie.director}</p>\n                        {movie.genres.map(genre => {\n                          console.log({genre})\n                          return <a className=\"badge badge-dark\">{genre.name}</a>\n                        })}\n                        <a href=\"#\" className=\"badge badge-primary\">IMDB Score: {movie.imdb_score}</a>\n                        <div>\n                          <button className=\"btn btn-primary pull-right\" onClick={_ => toggleEditMode(movie)}>Edit</button>\n                          <button className=\"btn btn-danger pull-right\" onClick={_ => deleteMovie(movie)}>Delete</button>\n                        </div>\n                      </>\n                    )\n                }\n                \n              </div>\n            </div>\n          </div>\n      ))}\n      \n      <div className=\"d-flex justify-content-center full-width w-100 p-3\">\n        {\n          page > 1\n          ?  <button className=\"btn btn-secondary mr-3\" onClick={_ => changePage(-1)}>Prev</button>\n          : null\n        }\n        page {page}\n        {\n          movies.length === 10\n          ? <button className=\"btn btn-secondary ml-3\" onClick={_ => changePage(1)}>Next</button>\n          : null\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Admin;",["80","81"],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/reportWebVitals.js",[],"/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/App.js",["82","83","84"],"import '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport './App.css';\nimport axios from 'axios'\nimport { BrowserRouter as Router, Link, Route, useHistory } from 'react-router-dom';\nimport Home from \"./pages/Home\";\nimport Admin from \"./pages/Admin\";\nimport PrivateRoute from './pages/PrivateRoute';\nimport Login from './pages/Login';\nimport Signup from './pages/Signup';\nimport NewMovie from './pages/NewMovie';\nimport { AuthContext } from './context/auth';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n  const existingTokens = JSON.parse(localStorage.getItem(\"tokens\") || '{}');\n  const existingIsAdmin = localStorage.getItem(\"isAdmin\");\n  const [authTokens, setAuthTokens] = useState(existingTokens);\n  const [isAdmin, setIsAdmin] = useState(existingIsAdmin);\n  let history = useHistory()\n  const setTokens = (data) => {\n    localStorage.setItem(\"tokens\", JSON.stringify(data));\n    setAuthTokens(data);\n  }\n  function logOut() {\n    localStorage.setItem(\"tokens\", '');\n    localStorage.setItem(\"isAdmin\", '');\n    setAuthTokens();\n  }\n  const isAdminProxy = isUserAdmin => {\n    localStorage.setItem(\"isAdmin\", isUserAdmin)\n    setIsAdmin(isUserAdmin)\n  }\n  return (\n    <div className=\"App\">\n      <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens, setIsAdmin: isAdminProxy, isAdmin }}>\n        <Router basename={'static'}>\n          <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n              <Link to=\"/\" className=\"navbar-brand\">\n                Fynd's IMDB\n              </Link>\n              <ul className=\"navbar-nav\">\n                <Link to=\"/\" className=\"navbar-brand\">\n                  <li className=\"nav-item active\">\n                    Home\n                  </li>\n                </Link>\n                \n                {authTokens && authTokens.access_token\n                ? (\n                    <>\n                    {\n                      isAdmin\n\n                      ? (\n                        <>\n                          <Link to=\"/admin\" className=\"navbar-brand\">\n                              <li className=\"nav-item\">\n                                Admin\n                              </li>\n                            </Link>\n                            <Link to=\"/newMovie\" className=\"navbar-brand\">\n                            <li className=\"nav-item\">\n                              New Movie\n                            </li>\n                          </Link>\n                        </>\n                      )\n                      : null\n                    }\n                      <li className=\"nav-item\" onClick={logOut}>\n                          Logout\n                      </li>\n                    </>\n                ) : (\n                  <Link to=\"/login\" className=\"navbar-brand\">\n                    <li className=\"nav-item\">\n                      Login\n                    </li>\n                  </Link>\n                )}\n              </ul>\n          </nav>\n          <div>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/login\" component={Login} />\n            <Route path=\"/signup\" component={Signup} />\n            <PrivateRoute path=\"/admin\" component={Admin} />\n            <PrivateRoute path=\"/newMovie\" component={NewMovie} />\n          </div>\n        </Router>\n      </AuthContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/pages/NewMovie.js",["85"],"import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useAuth } from \"../context/auth\";\nimport { useHistory } from \"react-router-dom\";\nimport CONSTANTS from \"../constants\";\n\nconst initialState = {\n  name: '',\n  director: '',\n  imdb_score: 0,\n  popularity: 0,\n  genres: [{\n    name: ''\n  }]\n}\nfunction NewMovie(props) {\n  const [movie, setMovie] = useState(initialState)\n  const history = useHistory()\n  const { authTokens } = useAuth()\n  const saveMovie = async () => {\n      if(!isFormValid()) {\n        return;\n      }\n      movie.genre = movie.genres;\n      const { token_type, access_token } = authTokens || {};\n      try {\n        const resp = await axios.post(CONSTANTS.path + '/movie/', movie, {\n          headers: {\n              'Authorization': ` ${token_type} ${access_token}`\n          }\n        });\n        if(resp.status === 201) {\n          alert('Saved successfully')\n          history.push('/')\n        } else {\n          alert('There was an error')\n        }\n      } catch (error) {\n        alert('There was an error. Please make sure you are logged in as admin')\n      }\n  }\n  const isFormValid = () => {\n    if(!movie.name || !movie.director) {\n      alert('Invalid details! Please fill all details')\n      return false;\n    }\n    if(movie.imdb_score < 0 || movie.imdb_score > 10) {\n      alert('IMDB score must be between 0 to 10')\n      return false\n    }\n    if(movie.popularity < 0 || movie.popularity > 100) {\n      alert('Popularity score must be between 0 to 100')\n      return false\n    }\n    return true\n  }\n  const changeHandler = (key, index) => e => {\n    const { value } = e.target;\n    if(key === 'genre' && !isNaN(index)) {\n      let genres = [...movie.genres]\n      genres[index].name = value;\n      setMovie({\n        ...movie,\n        genres,\n        [key]: value\n      })\n      return;\n    }\n    setMovie({\n      ...movie,\n      [key]: value\n    })\n  }\n  const addGenre = () => {\n    const genres = [...movie.genres];\n    genres.push({ name: '' })\n    setMovie({\n      ...movie,\n      genres\n    })\n  }\n  const removeGenre = (index) => {\n    const genres = [...movie.genres];\n    genres.splice(index,1);\n    setMovie({\n      ...movie,\n      genres\n    })\n  }\n  return (\n      <div className=\"row\">\n          <div className=\"d-flex justify-content-center align-items-center w-100 p-5\">\n              <div className=\"card\">\n                <div className=\"card-body\">\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">movie name</label>\n                  </div>\n                  <input className=\"form-control\" onChange={changeHandler('name')} value={movie.name}/>\n                </div>\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">director</label>\n                  </div>\n                  <input className=\"form-control\" onChange={changeHandler('director')} value={movie.director}/>\n                </div>\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">popularity</label>\n                  </div>\n                  <input type=\"number\" className=\"form-control\" onChange={changeHandler('popularity')} value={movie.popularity}/>\n                </div>\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">imdb score</label>\n                  </div>\n                  <input type=\"number\" className=\"form-control\" onChange={changeHandler('imdb_score')} value={movie.imdb_score}/>\n                </div>\n                <div className=\"input-group mb-3\">\n                  <div className=\"input-group-prepend\">\n                    <label className=\"input-group-text\">Genres</label>\n                    </div>\n                    <div className=\"d-flex flex-column\">\n                      {\n                        movie.genres.map((genre, index) => \n                          <div>\n                            <div class=\"input-group pr-1 pb-1\">\n                              <input type=\"text\" className=\"form-control\" onChange={changeHandler('genre', index)} value={genre.name}/>\n                              {\n                                movie.genres.length > 1 \n                                ? <div class=\"input-group-append\">\n                                    <button className=\"btn btn-danger\" onClick={_ => removeGenre(index)}>Remove</button>\n                                  </div>\n                                : null\n                              }\n                            </div>\n                            \n                          </div>\n                        )\n                      }\n                    </div>\n                      </div>\n                      <button className=\"btn btn-secondary\" onClick={addGenre}>+ Add Genre</button>\n                  </div>\n                  <button className=\"btn btn-primary pull-right\" onClick={_ => saveMovie()}>Save</button>\n                </div>\n              </div>\n          </div>\n  );\n}\n\nexport default NewMovie;","/home/mubashirar/Documents/projects/imdb_fynd_frontend/src/constants.js",["86"],"import { env } from \"process\";\nconsole.log({NIDE_ENV: env.NODE_ENV})\nexport default {\n    \"path\": env.NODE_ENV === 'development' ? '/api' : 'https://fynd--imdb.herokuapp.com'\n}",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":13,"column":6,"nodeType":"93","endLine":13,"endColumn":12,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":17,"column":6,"nodeType":"93","endLine":17,"endColumn":17,"suggestions":"96"},{"ruleId":"97","severity":1,"message":"98","line":29,"column":29,"nodeType":"99","messageId":"100","endLine":29,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":63,"column":26,"nodeType":"103","endLine":63,"endColumn":58},{"ruleId":"101","severity":1,"message":"104","line":66,"column":17,"nodeType":"103","endLine":66,"endColumn":61},{"ruleId":"87","replacedBy":"105"},{"ruleId":"89","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":26,"column":26,"nodeType":"109","messageId":"110","endLine":26,"endColumn":27,"suggestions":"111"},{"ruleId":"107","severity":1,"message":"108","line":26,"column":51,"nodeType":"109","messageId":"110","endLine":26,"endColumn":52,"suggestions":"112"},{"ruleId":"87","replacedBy":"113"},{"ruleId":"89","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":2,"column":16,"nodeType":"117","messageId":"118","endLine":2,"endColumn":24},{"ruleId":"91","severity":1,"message":"119","line":15,"column":13,"nodeType":"120","endLine":28,"endColumn":4},{"ruleId":"91","severity":1,"message":"121","line":28,"column":6,"nodeType":"93","endLine":28,"endColumn":18,"suggestions":"122"},{"ruleId":"91","severity":1,"message":"92","line":15,"column":6,"nodeType":"93","endLine":15,"endColumn":9,"suggestions":"123"},{"ruleId":"91","severity":1,"message":"124","line":15,"column":7,"nodeType":"109","endLine":15,"endColumn":8},{"ruleId":"91","severity":1,"message":"92","line":18,"column":6,"nodeType":"93","endLine":18,"endColumn":25,"suggestions":"125"},{"ruleId":"126","severity":1,"message":"127","line":23,"column":22,"nodeType":"120","messageId":"128","endLine":23,"endColumn":24},{"ruleId":"115","severity":1,"message":"129","line":47,"column":11,"nodeType":"117","messageId":"118","endLine":47,"endColumn":15},{"ruleId":"97","severity":1,"message":"98","line":71,"column":29,"nodeType":"99","messageId":"100","endLine":71,"endColumn":31},{"ruleId":"101","severity":1,"message":"102","line":104,"column":34,"nodeType":"103","endLine":104,"endColumn":66},{"ruleId":"101","severity":1,"message":"104","line":106,"column":25,"nodeType":"103","endLine":106,"endColumn":69},{"ruleId":"87","replacedBy":"130"},{"ruleId":"89","replacedBy":"131"},{"ruleId":"115","severity":1,"message":"132","line":3,"column":8,"nodeType":"117","messageId":"118","endLine":3,"endColumn":13},{"ruleId":"115","severity":1,"message":"133","line":12,"column":10,"nodeType":"117","messageId":"118","endLine":12,"endColumn":19},{"ruleId":"115","severity":1,"message":"134","line":19,"column":7,"nodeType":"117","messageId":"118","endLine":19,"endColumn":14},{"ruleId":"115","severity":1,"message":"133","line":1,"column":17,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":3,"column":1,"nodeType":"137","endLine":5,"endColumn":2},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllMovies'. Either include it or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'searchMovies'. Either include it or remove the dependency array.",["141"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["138"],["139"],"no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["142","143"],["144","145"],["138"],["139"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has missing dependencies: 'authTokens', 'history', and 'setIsAdmin'. Either include them or remove the dependency array.",["146"],["147"],"The 0 literal is not a valid dependency because it never changes. You can safely remove it.",["148"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","'resp' is assigned a value but never used.",["138"],["139"],"'axios' is defined but never used.","'useEffect' is defined but never used.","'history' is assigned a value but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation",{"desc":"149","fix":"150"},{"desc":"151","fix":"152"},{"messageId":"153","fix":"154","desc":"155"},{"messageId":"156","fix":"157","desc":"158"},{"messageId":"153","fix":"159","desc":"155"},{"messageId":"156","fix":"160","desc":"158"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"165","fix":"166"},"Update the dependencies array to be: [getAllMovies, page]",{"range":"167","text":"168"},"Update the dependencies array to be: [searchMovies, searchVal]",{"range":"169","text":"170"},"removeEscape",{"range":"171","text":"172"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"173","text":"174"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"175","text":"172"},{"range":"176","text":"174"},"Update the dependencies array to be: [authTokens, history, isLoggedIn, setIsAdmin]",{"range":"177","text":"178"},"Update the dependencies array to be: [getAllMovies]",{"range":"179","text":"180"},"Update the dependencies array to be: [page, deleteCount, getAllMovies]",{"range":"181","text":"182"},[318,324],"[getAllMovies, page]",[426,437],"[searchMovies, searchVal]",[697,698],"",[697,697],"\\",[722,723],[722,722],[909,921],"[authTokens, history, isLoggedIn, setIsAdmin]",[492,495],"[getAllMovies]",[543,562],"[page, deleteCount, getAllMovies]"]